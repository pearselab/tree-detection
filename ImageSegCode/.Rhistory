if(plants[x[selected.Location,1],x[selected.Location,2]] == ""){
plants[x[selected.Location,1],x[selected.Location,2]] <- species.plant
}else if(plants[x[selected.Location,1],x[selected.Location,2]] == species.plant){
}else{
plants[x[selected.Location,1],x[selected.Location,2]] <- compete(plants,info,plants[x[selected.Location,1],x[selected.Location,2]],species.plant)
}
return(plants)
}
counter = 0;
compete<- function(plant,info,selectedcell,currentcell){
if(selectedcell == "" || currentcell == ""){
winner <- ""
}else{prob.val.comp <- c(info$comp.mat[currentcell,currentcell],info$comp.mat[currentcell,selectedcell])
names.comp <- c(currentcell,selectedcell)
names(prob.val.comp) <- names.comp
winner <- sample(names.comp,1,prob = prob.val.comp)
}
return(winner)
}
survive <- function(cell,info,plants,row,col){
if(is.na(cell)){
}else if(cell == ""){
}else{
if(runif(1) <= info$survive[cell]){
#plants <- reproduce(row,col,plants,info)
}else{
cell <- ''
}
}
return(cell)
}
plant.timestep <- function(plants,info){
newPlant <- plants
for(i in 1:ncol(plants)){
for(j in 1:nrow(plants)){
newPlant[j,i] <-survive(newPlant[j,i],info,plants,j,i)
}
}
for(i in 1:ncol(plants)){
for(j in 1:nrow(plants)){
if(is.na(newPlant[j,i])){
}else if(newPlant[j,i] == ""){
}else{
newPlant <- reproduce(j,i,plants,info)
}
}
}
return(newPlant)
}
run.plant.ecosystem <-function(terrain, timesteps = 50,reproduct,matrix.comp,survival,names=NULL){
plant.Array <- array(0,dim = c(ncol(terrain),ncol(terrain),timesteps+1))
plant.info <- setup.plants(reproduct,survival,matrix.comp)
start.matrix  <- plant.matrix(terrain,plant.info)
plant.Array[,,1] <- start.matrix
for(i in seq_len(dim(plant.Array)[3])){
plant.Array[,,i][is.na(start.matrix)] <- NA
}
for(i in seq(2,timesteps+1)){
start.matrix <- plant.timestep(start.matrix,plant.info)
plant.Array[,,i] <- start.matrix
}
return(plant.Array)
}
survProb <-c(.95,1)
repro<- c(1,1)
comp <- matrix(c(0,1,1,0),2)
Test_run<-run.plant.ecosystem(terrains,100,repro,comp,survProb)
print(Test_run)
Test_run[,,1]
Test_run[,,100]
comp <- matrix(c(0,1,1,0),2)
comp <- c("a","b")
comp <- matrix(c(0,1,1,0),2)
survProb <-c(1,1)
repro<- c(1,1)
comp <- matrix(c(0,1,1,0),2)
rownames(comp) <- c("a","b")
colnames(comp)<- c("a","b")
print(comp)
comp <- matrix(c(0,1,1,0),2)
rownames(comp) <- c("a","b")
colnames(comp)<- c("a","b")
print(comp)
comp <- matrix(c(.5,.5,.5,.5),2)
rownames(comp) <- c("a","b")
colnames(comp)<- c("a","b")
print(comp)
Test_run<-run.plant.ecosystem(terrains,100,repro,comp,survProb)
print(Test_run)
comp <- matrix(c(1,.5,.1,.5),2)
rownames(comp) <- c("a","b")
colnames(comp)<- c("a","b")
print(comp)
comp <- matrix(c(1,.5,.1,1),2)
rownames(comp) <- c("a","b")
colnames(comp)<- c("a","b")
print(comp)
setup.plants <- function(repro, survive,comp.mat,names=NULL){
if(is.null(names))
names<-letters[seq_along(repro)]
if(length(repro)!= length(survive))
stop("Reproduction and survival parameters needed for all species")
if(ncol(comp.mat) != length(repro))
stop("comp matrix must represent the same amount of species as given in the reproduction and survive vectors")
if(length(names)!= length(repro))
stop("You have not provided us we enough species names")
for(i in 1:length(repro)){
if(repro[i]>1 || repro[i]<0)
stop("You must enter a probabilty for your reproduction vector. You need to give a number between 0 and 1")
if(survive[i]>1 || survive[i]<0)
stop("You must enter a probabilty for your survive vector. You need to give a number between 0 and 1")
}
for(i in 1:ncol(comp.mat)){
for(j in 1:nrow(comp.mat)){
if(comp.mat[i,j] >1 || comp.mat[i,j]<0){
stop("values in the comp.mat need to be between 0 and 1")
}
}
}
#add more checks
repro <- setNames(repro,names)
survive<-setNames(survive,names)
rownames(comp.mat) <- names
colnames(comp.mat) <- names
output <- list(repro=repro,survive=survive,comp.mat=comp.mat,names=names)
class(output) <- "plant"
return(output)
}
plant.matrix <- function(terrain,info){
plant.mat<- matrix(ncol=ncol(terrain),nrow = nrow(terrain))
for(i in 1:(ncol(plant.mat))){
for(j in 1:(nrow(plant.mat))){
x <- sample(0:length(info$repro),1)
if(terrain[i,j] < 0){
plant.mat[i,j] <- NA
}else{
if(x == 0){
plant.mat[i,j] <- ''
}else{
plant.mat[i,j] <- info$names[x]
}
}
}
}
return(plant.mat)
}
reproduce <- function(row, col, plants,info){
possible.locations <- as.matrix(expand.grid(row+c(-1,0,1),col+c(-1,0,1)))
for(i in 1:2){
for(j in 1:nrow(possible.locations)){
if(possible.locations[j,i] <= 0){
possible.locations[j,i] <- NA
}
else if(possible.locations[j,i]> ncol(plants)){
possible.locations[j,i] <- NA
}
}
}
for(h in 1:nrow(possible.locations)){
if(is.na(plants[possible.locations[h,1],possible.locations[h,2]])){
possible.locations[h,1] <- NA
}else if(possible.locations[h,1] == row && possible.locations[h,2] == col){
possible.locations[h,1] <- NA
}
}
x<- na.omit(possible.locations)
selected.Location <- sample(1:nrow(x),1)
species.plant<-plants[row,col]
if(plants[x[selected.Location,1],x[selected.Location,2]] == ""){
plants[x[selected.Location,1],x[selected.Location,2]] <- species.plant
}else if(plants[x[selected.Location,1],x[selected.Location,2]] == species.plant){
}else{
plants[x[selected.Location,1],x[selected.Location,2]] <- compete(plants,info,plants[x[selected.Location,1],x[selected.Location,2]],species.plant)
}
return(plants)
}
counter = 0;
compete<- function(plant,info,selectedcell,currentcell){
if(selectedcell == "" || currentcell == ""){
winner <- ""
}else{prob.val.comp <- c(info$comp.mat[currentcell,currentcell],info$comp.mat[currentcell,selectedcell])
names.comp <- c(currentcell,selectedcell)
names(prob.val.comp) <- names.comp
winner <- sample(names.comp,1,prob = prob.val.comp)
}
return(winner)
}
survive <- function(cell,info,plants,row,col){
if(is.na(cell)){
}else if(cell == ""){
}else{
if(runif(1) <= info$survive[cell]){
#plants <- reproduce(row,col,plants,info)
}else{
cell <- ''
}
}
return(cell)
}
plant.timestep <- function(plants,info){
newPlant <- plants
for(i in 1:ncol(plants)){
for(j in 1:nrow(plants)){
newPlant[j,i] <-survive(newPlant[j,i],info,plants,j,i)
}
}
for(i in 1:ncol(plants)){
for(j in 1:nrow(plants)){
if(is.na(newPlant[j,i])){
}else if(newPlant[j,i] == ""){
}else{
newPlant <- reproduce(j,i,plants,info)
}
}
}
return(newPlant)
}
run.plant.ecosystem <-function(terrain, timesteps = 50,reproduct,matrix.comp,survival,names=NULL){
plant.Array <- array(0,dim = c(ncol(terrain),ncol(terrain),timesteps+1))
plant.info <- setup.plants(reproduct,survival,matrix.comp)
start.matrix  <- plant.matrix(terrain,plant.info)
plant.Array[,,1] <- start.matrix
for(i in seq_len(dim(plant.Array)[3])){
plant.Array[,,i][is.na(start.matrix)] <- NA
}
for(i in seq(2,timesteps+1)){
start.matrix <- plant.timestep(start.matrix,plant.info)
plant.Array[,,i] <- start.matrix
}
return(plant.Array)
}
survProb <-c(1,1)
repro<- c(1,1)
comp <- matrix(c(1,.5,.1,1),2)
rownames(comp) <- c("a","b")
colnames(comp)<- c("a","b")
survProb <-c(1,1)
repro<- c(1,1)
comp <- matrix(c(1,.5,.1,1),2)
Test_run<-run.plant.ecosystem(terrains,100,repro,comp,survProb)
print(Test_run)
Test_run[,,1]
Test_run[,,100]
setup.plants <- function(repro, survive,comp.mat,names=NULL){
if(is.null(names))
names<-letters[seq_along(repro)]
if(length(repro)!= length(survive))
stop("Reproduction and survival parameters needed for all species")
if(ncol(comp.mat) != length(repro))
stop("comp matrix must represent the same amount of species as given in the reproduction and survive vectors")
if(length(names)!= length(repro))
stop("You have not provided us we enough species names")
for(i in 1:length(repro)){
if(repro[i]>1 || repro[i]<0)
stop("You must enter a probabilty for your reproduction vector. You need to give a number between 0 and 1")
if(survive[i]>1 || survive[i]<0)
stop("You must enter a probabilty for your survive vector. You need to give a number between 0 and 1")
}
for(i in 1:ncol(comp.mat)){
for(j in 1:nrow(comp.mat)){
if(comp.mat[i,j] >1 || comp.mat[i,j]<0){
stop("values in the comp.mat need to be between 0 and 1")
}
}
}
#add more checks
repro <- setNames(repro,names)
survive<-setNames(survive,names)
rownames(comp.mat) <- names
colnames(comp.mat) <- names
output <- list(repro=repro,survive=survive,comp.mat=comp.mat,names=names)
class(output) <- "plant"
return(output)
}
plant.matrix <- function(terrain,info){
plant.mat<- matrix(ncol=ncol(terrain),nrow = nrow(terrain))
for(i in 1:(ncol(plant.mat))){
for(j in 1:(nrow(plant.mat))){
x <- sample(0:length(info$repro),1)
if(terrain[i,j] < 0){
plant.mat[i,j] <- NA
}else{
if(x == 0){
plant.mat[i,j] <- ""
}else{
plant.mat[i,j] <- info$names[x]
}
}
}
}
return(plant.mat)
}
reproduce <- function(row, col, plants,info){
possible.locations <- as.matrix(expand.grid(row+c(-1,0,1),col+c(-1,0,1)))
for(i in 1:2){
for(j in 1:nrow(possible.locations)){
if(possible.locations[j,i] <= 0){
possible.locations[j,i] <- NA
}
else if(possible.locations[j,i]> ncol(plants)){
possible.locations[j,i] <- NA
}
}
}
for(h in 1:nrow(possible.locations)){
if(is.na(plants[possible.locations[h,1],possible.locations[h,2]])){
possible.locations[h,1] <- NA
}else if(possible.locations[h,1] == row && possible.locations[h,2] == col){
possible.locations[h,1] <- NA
}
}
x<- na.omit(possible.locations)
selected.Location <- sample(1:nrow(x),1)
species.plant<-plants[row,col]
if(plants[x[selected.Location,1],x[selected.Location,2]] == ""){
plants[x[selected.Location,1],x[selected.Location,2]] <- species.plant
}else if(plants[x[selected.Location,1],x[selected.Location,2]] == species.plant){
}else{
plants[x[selected.Location,1],x[selected.Location,2]] <- compete(plants,info,plants[x[selected.Location,1],x[selected.Location,2]],species.plant)
}
return(plants)
}
counter = 0;
compete<- function(plant,info,selectedcell,currentcell){
if(selectedcell == "" || currentcell == ""){
winner <- ""
}else{prob.val.comp <- c(info$comp.mat[currentcell,currentcell],info$comp.mat[currentcell,selectedcell])
names.comp <- c(currentcell,selectedcell)
names(prob.val.comp) <- names.comp
winner <- sample(names.comp,1,prob = prob.val.comp)
}
return(winner)
}
survive <- function(cell,info,plants,row,col){
if(is.na(cell)){
}else if(cell == ""){
}else{
if(runif(1) <= info$survive[cell]){
#plants <- reproduce(row,col,plants,info)
}else{
cell <- ""
}
}
return(cell)
}
plant.timestep <- function(plants,info){
newPlant <- plants
for(i in 1:ncol(plants)){
for(j in 1:nrow(plants)){
newPlant[j,i] <-survive(newPlant[j,i],info,plants,j,i)
}
}
for(i in 1:ncol(plants)){
for(j in 1:nrow(plants)){
if(is.na(newPlant[j,i])){
}else if(newPlant[j,i] == ""){
}else{
newPlant <- reproduce(j,i,plants,info)
}
}
}
return(newPlant)
}
run.plant.ecosystem <-function(terrain, timesteps = 50,reproduct,matrix.comp,survival,names=NULL){
plant.Array <- array(0,dim = c(ncol(terrain),ncol(terrain),timesteps+1))
plant.info <- setup.plants(reproduct,survival,matrix.comp)
start.matrix  <- plant.matrix(terrain,plant.info)
plant.Array[,,1] <- start.matrix
for(i in seq_len(dim(plant.Array)[3])){
plant.Array[,,i][is.na(start.matrix)] <- NA
}
for(i in seq(2,timesteps+1)){
start.matrix <- plant.timestep(start.matrix,plant.info)
plant.Array[,,i] <- start.matrix
}
return(plant.Array)
}
survProb <-c(1,1)
repro<- c(1,1)
comp <- matrix(c(1,.5,.1,1),2)
Test_run<-run.plant.ecosystem(terrains,100,repro,comp,survProb)
print(Test_run)
Test_run[,,100]
Test_run[,,1]
boom<-setup.plants(repro,survProb,comp)
testm<-plant.matrix(terrains,boom)
print(testm)
testn<-plant.timestep(testm,boom)
print(testn)
testn<-plant.timestep(testm,boom)
print(testn)
print(testn) <- plant.timestep(testm,boom)
boom<-setup.plants(repro,survProb,comp)
testm<-plant.matrix(terrains,boom)
print(testm)
testn<-plant.timestep(testm,boom)
testn<-plant.timestep(testm,boom)
print(testn) <- plant.timestep(testm,boom)
print(testn)
testn <- plant.timestep(testm,boom)
print(testn)
testn<-plant.timestep(testm,boom)
print(testn)
testn <- plant.timestep(testn,boom)
print(testn)
comp <- matrix(c(1,.5,.1,1),2)
print(comp)
comp <- matrix(c(1,..9,.9,1),2)
print(comp)
comp <- matrix(c(1,.9,.9,1),2)
print(comp)
Test_run<-run.plant.ecosystem(terrains,100,repro,comp,survProb)
print(Test_run)
boom<-setup.plants(repro,survProb,comp)
testm<-plant.matrix(terrains,boom)
survProb <-c(1,1)
repro<- c(1,1)
comp <- matrix(c(1,.9,.9,1),2)
print(comp)
testm<-plant.matrix(terrains,boom)
boom<-setup.plants(repro,survProb,comp)
testm<-plant.matrix(terrains,boom)
print(testm)
testn<-plant.timestep(testm,boom)
print(testn)
testn <- plant.timestep(testn,boom)
print(testn)
testn<-plant.timestep(testm,boom)
print(testn)
for(i in 1:30){
testn <- plant.timestep(testn,boom)
}
for(i in 1:30){
testn <- plant.timestep(testn,boom)
}
print(testn)
print(testm)
testn<-plant.timestep(testm,boom)
print(testn)
for(i in 1:30){
testn <- plant.timestep(testn,boom)
}
print(testn)
for(i in 1:30){
testn <- plant.timestep(testn,boom)
}
print(testn)
for(i in 1:30){
testn <- plant.timestep(testn,boom)
}
print(testn)
survProb <-c(1,1)
repro<- c(1,1)
comp <- matrix(c(1,0,0,1),2)
print(comp)
comp <- matrix(c(1,.9,.9,1),2)
print(comp)
survProb <-c(1,1)
repro<- c(1,1)
comp <- matrix(c(1,.9,.9,1),2)
print(comp)
boom<-setup.plants(repro,survProb,comp)
testm<-plant.matrix(terrains,boom)
print(testm)
testn<-plant.timestep(testm,boom)
print(testn)
for(i in 1:30){
testn <- plant.timestep(testn,boom)
}
print(testn)
for(i in 1:30){
testn <- plant.timestep(testn,boom)
}
print(testn)
for(i in 1:30){
testn <- plant.timestep(testn,boom)
}
print(testn)
for(i in 1:30){
testn <- plant.timestep(testn,boom)
}
print(testn)
for(i in 1:500){
testn <- plant.timestep(testn,boom)
}
print(testn)
print(testm)
survProb <-c(.95,.95)
repro<- c(.4,.6)
comp <- matrix(c(.7,.3,.3,.7),2)
print(comp)
Test_run<-run.plant.ecosystem(terrains,100,repro,comp,survProb)
print(Test_run)
Test_run[,,1]
Test_run[,,100]
boom<-setup.plants(repro,survProb,comp)
testm<-plant.matrix(terrains,boom)
print(testm)
testn<-plant.timestep(testm,boom)
print(testn)
for(i in 1:30){
testn <- plant.timestep(testn,boom)
}
print(testn)
testn <- plant.timestep(testn,boom)
print(testn)
for(i in 1:30){
testn <- plant.timestep(testn,boom)
}
print(testn)
testn <- plant.timestep(testn,boom)
print(testn)
